import { NextRequest, NextResponse } from "next/server";

const BASE_URL = process.env.NEXT_API_BASE_URL;

/**
 * SIMPLIFIED EMAIL API ROUTE - JSON ONLY
 * 
 * This route now uses the simplified FastAPI endpoint that only accepts JSON format.
 * FastAPI expects: { email, subject, body, attachments: [...] }
 * - Converts images to base64 for attachments
 * - Single, reliable method for both production and development
 * - No complex fallback logic needed
 */

export async function POST(request: NextRequest) {
  try {
    console.log("üìß Send-email API called at:", new Date().toISOString());
    console.log("üåç Environment:", process.env.NODE_ENV);

    // Parse form data from the request
    const formData = await request.formData();
    const email = formData.get("email") as string;
    const subject = formData.get("subject") as string;
    const body = formData.get("body") as string;

    console.log("üìã Request data:", {
      email: email ? "‚úì" : "‚úó",
      subject: subject ? "‚úì" : "‚úó",
      body: body ? `${body.length} chars` : "‚úó",
    });

    // Validate required fields
    if (!email || !subject || !body) {
      console.log("‚ùå Validation failed");
      return NextResponse.json(
        { error: "Missing required fields: email, subject, or body" },
        { status: 400 }
      );
    }

    // Handle images
    const images = formData.getAll("image") as File[];
    const validImages = images.filter(img => img instanceof File && img.size > 0);
    
    console.log("üñºÔ∏è Images found:", validImages.length);

    // Convert images to base64 attachments
    const attachments = [];
    for (let i = 0; i < validImages.length; i++) {
      const image = validImages[i];
      try {
        console.log(`üìé Processing image ${i}: ${image.name} (${image.size} bytes)`);
        
        const arrayBuffer = await image.arrayBuffer();
        const base64 = Buffer.from(arrayBuffer).toString("base64");
        
        attachments.push({
          filename: image.name || `image_${i}.jpg`,
          content: base64,
          type: image.type || "image/jpeg",
          disposition: "attachment",
        });
        
        console.log(`‚úÖ Converted image ${i} to base64`);
      } catch (error) {
        console.error(`‚ùå Error converting image ${i}:`, error);
      }
    }

    // Send to FastAPI
    return await sendEmailToFastAPI(email, subject, body, attachments);

  } catch (error: any) {
    console.error("üö® Send-email API error:", error);
    return NextResponse.json(
      {
        error: "Internal server error",
        details: error.message,
      },
      { status: 500 }
    );
  }
}

/**
 * Send email to FastAPI using the simplified JSON format
 */
async function sendEmailToFastAPI(
  email: string,
  subject: string,
  body: string,
  attachments: any[]
) {
  console.log("üì§ Sending to FastAPI...");
  console.log("üìã Payload:", {
    email,
    subject,
    bodyLength: body.length,
    attachmentCount: attachments.length,
  });

  // Create the exact JSON format that FastAPI expects
  const jsonPayload = {
    email: email,
    subject: subject,
    body: body,
    attachments: attachments,
  };

  const controller = new AbortController();
  const timeoutId = setTimeout(() => {
    console.log("‚è∞ Request timeout after 30s");
    controller.abort();
  }, 30000);

  try {
    const response = await fetch(`${BASE_URL}/send-email`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify(jsonPayload),
      signal: controller.signal,
    });

    clearTimeout(timeoutId);

    console.log("üì° FastAPI response:", {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok,
    });

    const responseText = await response.text();
    console.log("üìÑ FastAPI response text:", responseText);

    if (response.ok) {
      let responseData;
      try {
        responseData = JSON.parse(responseText);
        console.log("‚úÖ Email sent successfully via FastAPI");
      } catch (parseError) {
        responseData = { message: responseText };
      }

      return NextResponse.json({
        success: true,
        message: attachments.length > 0 
          ? "Email with images sent successfully" 
          : "Email sent successfully",
        data: responseData,
        debug: {
          method: "JSON_DIRECT_TO_FASTAPI",
          imageCount: attachments.length,
          environment: process.env.NODE_ENV,
        },
      });
    } else {
      console.log("‚ùå FastAPI error:", response.status, responseText);
      return NextResponse.json(
        {
          error: "Failed to send email via FastAPI",
          details: responseText,
          status: response.status,
        },
        { status: response.status }
      );
    }
  } catch (fetchError: any) {
    clearTimeout(timeoutId);
    console.error("üö® Fetch error:", fetchError);

    if (fetchError.name === "AbortError") {
      return NextResponse.json({ error: "Request timeout" }, { status: 408 });
    }

    return NextResponse.json(
      { error: "Network error", details: fetchError.message },
      { status: 500 }
    );
  }
}
